"""
Django settings for EngineeringApp project.

Generated by 'django-admin startproject' using Django 1.10.4.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os
import dj_database_url
import random
import string

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
key_exists = "SECRET_KEY" in os.environ
if not key_exists:
    print('Warning: SECRET_KEY is not set. For test purposes I am setting '
          'it to a random hash')
    SECRET_KEY = ''.join(random.choices(
        string.ascii_uppercase + string.digits, k=10))
else:
    SECRET_KEY = os.environ["SECRET_KEY"]

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# select own user model
AUTH_USER_MODEL = 'user.User'

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'enviro.apps.EnviroConfig',
    'user.apps.UserConfig',
    'contact.apps.ContactConfig',
    'home.apps.HomeConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    # Disable Django's own staticfiles handling in favour of WhiteNoise, for
    # greater consistency between gunicorn and `./manage.py runserver`. See:
    # http://whitenoise.evans.io/en/stable/django.html#using-whitenoise-in-development
    #'whitenoise.runserver_nostatic',
    #'django.contrib.staticfiles',
    'latexify',
    'django.contrib.staticfiles', # a requirement for latexify
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'EngineeringApp.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ["./templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'EngineeringApp.wsgi.application'

# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = [
    './static/',
]

ALLOWED_HOSTS = [
    '192.168.2.8',
    '0.0.0.0',
    '192.168.178.89',
    '127.0.0.1',
    'localhost',
    '134.102.113.71.',
    '134.102.162.102',
    '134.102.162.29',
    '134.102.174.219',
    'serene-sierra-98066.herokuapp.com'
]

MEDIA_ROOT = os.path.join(BASE_DIR, 'enviro/MeasureCSV')
MEDIA_URL = '/enviro/MeasureCSV/'

# execute this for debug smtp:
# python -m smtpd -n -c DebuggingServer localhost:1025

# un-comment this for debug smtp:
# EMAIL_HOST = 'localhost'
# EMAIL_PORT = 1025

# comment out this if debug smtp should be executed:
DEFAULT_FROM_EMAIL = 'virocon@gmx.de'
EMAIL_USE_TLS = True
EMAIL_HOST = 'mail.gmx.net'
EMAIL_PORT = 587
EMAIL_HOST_USER = 'virocon@gmx.de'
key_exists = "EMAIL_HOST_PASSWORD" in os.environ
if not key_exists:
    print('Warning: EMAIL_HOST_PASSWORD is not set')
else:
    EMAIL_HOST_PASSWORD = os.environ["EMAIL_HOST_PASSWORD"]

# see https://devcenter.heroku.com/articles/django-app-configuration
# Change 'default' database configuration with $DATABASE_URL.
db_from_env = dj_database_url.config(conn_max_age=500)
DATABASES['default'].update(db_from_env)

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/

#PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))

#STATIC_ROOT = os.path.join(PROJECT_ROOT, 'staticfiles')
#STATIC_URL = '/static/'

# Extra places for collectstatic to find static files.
#STATICFILES_DIRS = (
#    os.path.join(PROJECT_ROOT, 'static'),
#)

# Simplified static file serving.
# https://warehouse.python.org/project/whitenoise/

#STATICFILES_STORAGE = 'whitenoise.django.GzipManifestStaticFilesStorage'

# see https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/
#CSRF_COOKIE_SECURE = True
#SESSION_COOKIE_SECURE = True